{"version":3,"sources":["../../src/ckbutton.directive.ts","../../src/ckgroup.directive.ts","../../src/ckeditor.component.ts","../../src/ckeditor.module.ts"],"names":["CKButtonDirective","this","click","EventEmitter","prototype","initialize","editor","_this","instance","addCommand","command","exec","evt","emit","ui","addButton","name","label","toolbar","icon","ngOnInit","Error","Directive","args","selector","Output","Input","CKGroupDirective","ngAfterContentInit","toolbarButtons","forEach","button","addToolbarGroup","previous","subgroupOf","ContentChildren","CKEditorComponent","zone","change","editorChange","ready","blur","focus","contentDom","fileUploadRequest","fileUploadResponse","paste","drop","_value","destroyed","Object","defineProperty","v","onChange","ngOnChanges","changes","readonly","setReadOnly","currentValue","ngOnDestroy","runOutsideAngular","CKEDITOR","removeAllListeners","destroy","ngAfterViewInit","ckeditorInit","config","ngAfterViewChecked","updateValue","value","run","onTouched","console","warn","documentContains","host","nativeElement","readOnly","replace","setData","on","getData","debounce","debounceTimeout","clearTimeout","setTimeout","parseInt","toolbarGroups","group","writeValue","_","registerOnChange","fn","registerOnTouched","node","document","contains","body","Component","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","template","NgZone","ViewChild","static","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, OnInit, EventEmitter, Output, Input } from '@angular/core';\nimport { CKEditorComponent } from './ckeditor.component';\n\n/**\n * CKGroup component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\">\n *      <ckbutton [name]=\"'SaveButton'\" [command]=\"'saveCommand'\" (click)=\"save($event)\"\n *                [icon]=\"'/save.png'\" [toolbar]=\"'customGroup,1'\" [label]=\"'Save'\">\n *      </ckbutton>\n *   </ckeditor>\n */\n@Directive({\n  selector: 'ckbutton',\n})\nexport class CKButtonDirective implements OnInit {\n  @Output() click = new EventEmitter();\n  @Input() label: string;\n  @Input() command: string;\n  @Input() toolbar: string;\n  @Input() name: string;\n  @Input() icon: string;\n\n  initialize(editor: CKEditorComponent) {\n    editor.instance.addCommand(this.command, {\n      exec: (evt: any) => {\n        this.click.emit(evt);\n      },\n    });\n\n    editor.instance.ui.addButton(this.name, {\n      label: this.label,\n      command: this.command,\n      toolbar: this.toolbar,\n      icon: this.icon,\n    });\n  }\n\n  ngOnInit(): void {\n    if (!this.name) throw new Error('Attribute \"name\" is required on <ckbutton>');\n    if (!this.command) throw new Error('Attribute \"command\" is required on <ckbutton>');\n  }\n}\n","import { Directive, Input, AfterContentInit, ContentChildren, QueryList } from '@angular/core';\nimport { CKEditorComponent } from './ckeditor.component';\nimport { CKButtonDirective } from './ckbutton.directive';\n\n/**\n * CKGroup component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\">\n *      <ckgroup [name]=\"'exampleGroup2'\" [previous]=\"'1'\" [subgroupOf]=\"'exampleGroup1'\">\n *          .\n *          .\n *      </ckgroup>\n *   </ckeditor>\n */\n@Directive({\n  selector: 'ckgroup',\n})\nexport class CKGroupDirective implements AfterContentInit {\n  @Input() name: string;\n  @Input() previous: any;\n  @Input() subgroupOf: string;\n  @ContentChildren(CKButtonDirective) toolbarButtons: QueryList<CKButtonDirective>;\n\n  ngAfterContentInit() {\n    // Reconfigure each button's toolbar property within ckgroup to hold its parent's name\n    this.toolbarButtons.forEach((button) => (button.toolbar = this.name));\n  }\n\n  public initialize(editor: CKEditorComponent) {\n    editor.instance.ui.addToolbarGroup(this.name, this.previous, this.subgroupOf);\n    // Initialize each button within ckgroup\n    this.toolbarButtons.forEach((button) => {\n      button.initialize(editor);\n    });\n  }\n}\n","// Imports\nimport {\n  Component,\n  Input,\n  Output,\n  ViewChild,\n  EventEmitter,\n  NgZone,\n  forwardRef,\n  QueryList,\n  AfterViewInit,\n  ContentChildren,\n  SimpleChanges,\n  OnChanges,\n  OnDestroy\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CKButtonDirective } from './ckbutton.directive';\nimport { CKGroupDirective } from './ckgroup.directive';\n\ndeclare var CKEDITOR: any;\n\n/**\n * CKEditor component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\"></ckeditor>\n */\n@Component({\n  selector: 'ckeditor',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CKEditorComponent),\n      multi: true,\n    },\n  ],\n  template: `<textarea #host></textarea>`,\n})\nexport class CKEditorComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() config: any;\n  @Input() readonly: boolean;\n  @Input() debounce: string;\n\n  @Output() change = new EventEmitter();\n  @Output() editorChange = new EventEmitter();\n  @Output() ready = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Output() focus = new EventEmitter();\n  @Output() contentDom = new EventEmitter();\n  @Output() fileUploadRequest = new EventEmitter();\n  @Output() fileUploadResponse = new EventEmitter();\n  @Output() paste = new EventEmitter();\n  @Output() drop = new EventEmitter();\n\n  @ViewChild('host', { static: false }) host: any;\n\n  @ContentChildren(CKButtonDirective) toolbarButtons: QueryList<CKButtonDirective>;\n  @ContentChildren(CKGroupDirective) toolbarGroups: QueryList<CKGroupDirective>;\n\n  _value = '';\n  instance: any;\n  debounceTimeout: any;\n  private destroyed = false;\n\n  /**\n   * Constructor\n   */\n  constructor(private zone: NgZone) {}\n\n  get value(): any {\n    return this._value;\n  }\n  @Input()\n  set value(v) {\n    if (v !== this._value) {\n      this._value = v;\n      this.onChange(v);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.readonly && this.instance) {\n      this.instance.setReadOnly(changes.readonly.currentValue);\n    }\n  }\n\n  /**\n   * On component destroy\n   */\n  ngOnDestroy() {\n    this.destroyed = true;\n    this.zone.runOutsideAngular( () => {\n      if (this.instance) {\n        CKEDITOR.removeAllListeners();\n        this.instance.destroy();\n        this.instance = null;\n      }\n    });\n  }\n\n  /**\n   * On component view init\n   */\n  ngAfterViewInit() {\n    if (this.destroyed) {\n      return;\n    }\n    this.ckeditorInit(this.config || {});\n  }\n\n  /**\n   * On component view checked\n   */\n  ngAfterViewChecked() {\n    this.ckeditorInit(this.config || {});\n  }\n\n  /**\n   * Value update process\n   */\n  updateValue(value: any) {\n    this.zone.run(() => {\n      this.value = value;\n\n      this.onChange(value);\n\n      this.onTouched();\n      this.change.emit(value);\n    });\n  }\n\n  /**\n   * CKEditor init\n   */\n  ckeditorInit(config: any) {\n    if (typeof CKEDITOR === 'undefined') {\n      console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');\n    } else {\n      // Check textarea exists\n      if (this.instance || !this.documentContains(this.host.nativeElement)) {\n        return;\n      }\n\n      if (this.readonly) {\n        config.readOnly = this.readonly;\n      }\n      // CKEditor replace textarea\n      this.instance = CKEDITOR.replace(this.host.nativeElement, config);\n\n      // Set initial value\n      this.instance.setData(this.value);\n\n      // listen for instanceReady event\n      this.instance.on('instanceReady', (evt: any) => {\n        // if value has changed while instance loading\n        // update instance with current component value\n        if (this.instance.getData() !== this.value) {\n          this.instance.setData(this.value);\n        }\n\n        // send the evt to the EventEmitter\n        this.ready.emit(evt);\n      });\n\n      // CKEditor change event\n      this.instance.on('change', (evt: any) => {\n        this.onTouched();\n        let value = this.instance.getData();\n\n        if (this.value !== value) {\n          // Debounce update\n          if (this.debounce) {\n            if (this.debounceTimeout) clearTimeout(this.debounceTimeout);\n            this.debounceTimeout = setTimeout(() => {\n              this.updateValue(value);\n              this.debounceTimeout = null;\n            }, parseInt(this.debounce));\n\n            // Live update\n          } else {\n            this.updateValue(value);\n          }\n        }\n\n        // Original ckeditor event dispatch\n        this.editorChange.emit(evt);\n      });\n\n      // CKEditor blur event\n      this.instance.on('blur', (evt: any) => {\n        this.blur.emit(evt);\n      });\n\n      // CKEditor focus event\n      this.instance.on('focus', (evt: any) => {\n        this.focus.emit(evt);\n      });\n\n      // CKEditor contentDom event\n      this.instance.on('contentDom', (evt: any) => {\n        this.contentDom.emit(evt);\n      });\n\n      // CKEditor fileUploadRequest event\n      this.instance.on('fileUploadRequest', (evt: any) => {\n        this.fileUploadRequest.emit(evt);\n      });\n\n      // CKEditor fileUploadResponse event\n      this.instance.on('fileUploadResponse', (evt: any) => {\n        this.fileUploadResponse.emit(evt);\n      });\n\n      // CKEditor paste event\n      this.instance.on('paste', (evt: any) => {\n        this.paste.emit(evt);\n      });\n\n      // CKEditor drop event\n      this.instance.on('drop', (evt: any) => {\n        this.drop.emit(evt);\n      });\n\n      // Add Toolbar Groups to Editor. This will also add Buttons within groups.\n      this.toolbarGroups.forEach((group) => {\n        group.initialize(this);\n      });\n      // Add Toolbar Buttons to Editor.\n      this.toolbarButtons.forEach((button) => {\n        button.initialize(this);\n      });\n    }\n  }\n\n  /**\n   * Implements ControlValueAccessor\n   */\n  writeValue(value: any) {\n    this._value = value;\n    if (this.instance) this.instance.setData(value);\n  }\n  onChange(_: any) {}\n  onTouched() {}\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  private documentContains(node: Node) {\n    return document.contains ? document.contains(node) : document.body.contains(node);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CKEditorComponent } from './ckeditor.component';\nimport { CKButtonDirective } from './ckbutton.directive';\nimport { CKGroupDirective } from './ckgroup.directive';\n\n/**\n * CKEditorModule\n */\n@NgModule({\n  imports: [CommonModule],\n  declarations: [CKEditorComponent, CKButtonDirective, CKGroupDirective],\n  exports: [CKEditorComponent, CKButtonDirective, CKGroupDirective],\n})\nexport class CKEditorModule {}\n"]}