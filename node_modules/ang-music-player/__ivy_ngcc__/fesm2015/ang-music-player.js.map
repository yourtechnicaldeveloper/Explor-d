{"version":3,"file":"ang-music-player.js","sources":["../../../projects/ang-music-player/src/lib/serives/ang-music-player.service.ts","../../../projects/ang-music-player/src/lib/audioPlayer.ts","../../../projects/ang-music-player/src/lib/component/ang-music-player.component.ts","../../../projects/ang-music-player/src/lib/pipes/time-conversion.pipe.ts","../../../projects/ang-music-player/src/lib/ang-music-player.module.ts","../../../projects/ang-music-player/src/public-api.ts","../../../projects/ang-music-player/src/ang-music-player.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngMusicPlayerService {\r\n\r\n  constructor() { }\r\n}\r\n","import { ElementRef, ViewChild, EventEmitter, Output, Component } from '@angular/core'\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  template: ''\r\n})\r\n\r\nexport class AudioPlyerOptions {\r\n  totalAudioLength;\r\n  currentAudioTime = 0;\r\n  isAudioLoaded: boolean = false;\r\n  isAudioPlaying: boolean;\r\n  isRepeat: boolean = false;\r\n  audioVolume = 100;\r\n  isAudioEnded = new Subject;\r\n  isMute = false;\r\n  @Output() playEvent = new EventEmitter();\r\n  @Output() pauseEvent = new EventEmitter();\r\n\r\n\r\n  //Access audio player dom\r\n  @ViewChild('audioPlayer', { static: true }) audioPlayer: ElementRef;\r\n\r\n\r\n  //get audio player events\r\n  options(): void {\r\n    //emit event when playing audio\r\n    this.audioPlayer.nativeElement.addEventListener('playing', () => {\r\n    });\r\n\r\n    //emit when intial loading of audio\r\n    this.audioPlayer.nativeElement.addEventListener('loadeddata', () => {\r\n      this.isAudioLoaded = true;\r\n      this.getAudioLength();\r\n    });\r\n\r\n    //emit time on playing audio\r\n    this.audioPlayer.nativeElement.addEventListener('timeupdate', () => {\r\n      //get current audio time\r\n      this.currentAudioTime = Math.floor(this.audioPlayer.nativeElement.currentTime);\r\n      //check if audio is ended for next song and pass data to component\r\n      if (this.audioPlayer.nativeElement.ended) {\r\n        this.isAudioEnded.next(true);\r\n      }\r\n    });\r\n\r\n    this.audioPlayer.nativeElement.addEventListener('volumechange', () => {\r\n      this.audioVolume = Math.floor(this.audioPlayer.nativeElement.volume * 100);\r\n      if (this.audioVolume == 0) {\r\n        this.isMute = true;\r\n      } else {\r\n        this.isMute = false;\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  play() {\r\n    //toggle play-pause button\r\n    this.isAudioPlaying = true;\r\n    //play when user click play button\r\n    setTimeout(() => {\r\n      this.audioPlayer.nativeElement.play();\r\n      this.playEvent.emit();\r\n     }, 0);\r\n  }\r\n\r\n  pause() {\r\n    //toggle play-pause button\r\n    this.isAudioPlaying = false;\r\n    //pause when user click pause button\r\n    setTimeout(() => {\r\n      this.audioPlayer.nativeElement.pause();\r\n      this.pauseEvent.emit();\r\n     }, 0);\r\n  }\r\n\r\n  getAudioLength() {\r\n    this.totalAudioLength = Math.floor(this.audioPlayer.nativeElement.duration);\r\n  }\r\n}\r\n","import { Component, OnInit, Output, Input, EventEmitter } from '@angular/core';\r\nimport { AudioPlyerOptions } from '../audioPlayer';\r\n\r\n@Component({\r\n  selector: 'ang-music-player',\r\n  templateUrl: './ang-music-player.component.html',\r\n  styleUrls: ['./ang-music-player.component.scss']\r\n})\r\nexport class AngMusicPlayerComponent extends AudioPlyerOptions implements OnInit {\r\n  @Input() width; \r\n  @Input() height; \r\n  @Input() backgroundColor; \r\n  @Input() audioTimeColor;\r\n  @Input() audioTitleColor; \r\n  @Input() volumeSliderColor; \r\n  @Input() timeSliderColor;\r\n  @Input() audioList = [];\r\n  @Input() next = true;\r\n  @Input() previous = true;\r\n  @Input() shuffle = true;\r\n  @Input() repeat = true;\r\n  @Input() scrollTitle = false;\r\n  @Input() playButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() pauseButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() nextButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() previousButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() repeatButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() activeRepeatButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() volumeButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() muteButtonColor = \"rgb(76, 130, 175)\";\r\n  @Output() nextEvent = new EventEmitter();\r\n  @Output() previousEvent = new EventEmitter();\r\n  @Output() repeatEvent = new EventEmitter();\r\n  @Output() shuffleEvent = new EventEmitter();\r\n  @Output() seekEvent = new EventEmitter();\r\n\r\n  selectedAudio;\r\n  currentAudioIndex = 0;\r\n  repeatActive = false;\r\n  isError = false;\r\n  isShuffle = false;\r\n  volumeBeforeMute;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.options();\r\n    this.initiateAudioPlayer();\r\n    //check audio is ended for next song\r\n    this.isAudioEnded.subscribe(data => {\r\n      if (!this.isRepeat && this.audioList.length > 0) {\r\n        this.nextAudio();\r\n      }\r\n    })\r\n  }\r\n\r\n  nextAudio() {\r\n    if (this.audioList.length - 1 != this.currentAudioIndex) {\r\n      this.currentAudioIndex += 1;\r\n      this.selectedAudio = this.audioList[this.currentAudioIndex];\r\n      this.getAudioLength();\r\n      if (this.isAudioPlaying) {\r\n        this.play();\r\n      }\r\n      this.nextEvent.emit();\r\n    }else{\r\n      this.pause();\r\n    }\r\n  }\r\n\r\n  previousAudio() {\r\n    if (this.currentAudioIndex != 0) {\r\n      this.currentAudioIndex -= 1;\r\n      this.selectedAudio = this.audioList[this.currentAudioIndex];\r\n      this.getAudioLength();\r\n      if (this.isAudioPlaying) {\r\n        this.play();\r\n      }\r\n      this.previousEvent.emit();\r\n    }\r\n  }\r\n\r\n  seekAudio(seekAudioValue) {\r\n    if (this.audioVolume != 0) {\r\n      this.isMute = false;\r\n    }\r\n    this.audioPlayer.nativeElement.currentTime = seekAudioValue.target.value;\r\n    this.seekEvent.emit();\r\n  }\r\n\r\n  repeatAudio() {\r\n    this.isRepeat = !this.isRepeat;\r\n    this.repeatActive = !this.repeatActive;\r\n    this.audioPlayer.nativeElement.loop = this.isRepeat;\r\n    this.repeatEvent.emit();\r\n  }\r\n\r\n/*   shuffleAudio() {\r\n    this.isShuffle = !this.isShuffle;\r\n    if (this.isShuffle) {\r\n    let randomItem = Math.floor(Math.random() * this.audioList.length);\r\n    console.log(randomItem);\r\n    \r\n    }\r\n    this.shuffleEvent.emit();\r\n  } */\r\n\r\n  volumeChange(volume) {\r\n    this.audioPlayer.nativeElement.volume = volume.target.value / 100;\r\n  }\r\n\r\n  muteAudio() {\r\n    if (this.isMute) {\r\n      this.audioPlayer.nativeElement.volume = 0.5;\r\n      this.isMute = false;\r\n    } else {\r\n      this.audioPlayer.nativeElement.volume = 0;\r\n      this.isMute = true;\r\n    }\r\n  }\r\n\r\n  initiateAudioPlayer() {\r\n    if (this.audioList.length <= 0) {\r\n      this.isError = true;\r\n    } else {\r\n      this.selectedAudio = this.audioList[this.currentAudioIndex];\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'timeConversion'\r\n})\r\nexport class TimeConversionPipe implements PipeTransform {\r\n\r\n  transform(audioTime: number): string {\r\n    let audioLengthMin = ( \"0\" + Math.floor( audioTime / 60)).slice(-2);\r\n    let audioLengthSec = ( \"0\" + audioTime % 60).slice(-2);\r\n    return `${audioLengthMin}:${audioLengthSec}`\r\n\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AngMusicPlayerComponent } from './component/ang-music-player.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimeConversionPipe } from './pipes/time-conversion.pipe';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [AngMusicPlayerComponent, TimeConversionPipe],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [AngMusicPlayerComponent]\r\n})\r\nexport class AngMusicPlayerModule { }\r\n","/*\r\n * Public API Surface of ang-music-player\r\n */\r\n\r\nexport * from './lib/serives/ang-music-player.service';\r\nexport * from './lib/component/ang-music-player.component';\r\nexport * from './lib/ang-music-player.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AudioPlyerOptions as ɵa} from './lib/audioPlayer';\nexport {TimeConversionPipe as ɵb} from './lib/pipes/time-conversion.pipe';"]}