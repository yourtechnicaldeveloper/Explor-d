{"version":3,"file":"ang-music-player.js","sources":["../../../projects/ang-music-player/src/lib/serives/ang-music-player.service.ts","../../../projects/ang-music-player/src/lib/audioPlayer.ts","../../../projects/ang-music-player/src/lib/component/ang-music-player.component.ts","../../../projects/ang-music-player/src/lib/pipes/time-conversion.pipe.ts","../../../projects/ang-music-player/src/lib/ang-music-player.module.ts","../../../projects/ang-music-player/src/public-api.ts","../../../projects/ang-music-player/src/ang-music-player.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngMusicPlayerService {\r\n\r\n  constructor() { }\r\n}\r\n","import { ElementRef, ViewChild, EventEmitter, Output, Component } from '@angular/core'\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  template: ''\r\n})\r\n\r\nexport class AudioPlyerOptions {\r\n  totalAudioLength;\r\n  currentAudioTime = 0;\r\n  isAudioLoaded: boolean = false;\r\n  isAudioPlaying: boolean;\r\n  isRepeat: boolean = false;\r\n  audioVolume = 100;\r\n  isAudioEnded = new Subject;\r\n  isMute = false;\r\n  @Output() playEvent = new EventEmitter();\r\n  @Output() pauseEvent = new EventEmitter();\r\n\r\n\r\n  //Access audio player dom\r\n  @ViewChild('audioPlayer', { static: true }) audioPlayer: ElementRef;\r\n\r\n\r\n  //get audio player events\r\n  options(): void {\r\n    //emit event when playing audio\r\n    this.audioPlayer.nativeElement.addEventListener('playing', () => {\r\n    });\r\n\r\n    //emit when intial loading of audio\r\n    this.audioPlayer.nativeElement.addEventListener('loadeddata', () => {\r\n      this.isAudioLoaded = true;\r\n      this.getAudioLength();\r\n    });\r\n\r\n    //emit time on playing audio\r\n    this.audioPlayer.nativeElement.addEventListener('timeupdate', () => {\r\n      //get current audio time\r\n      this.currentAudioTime = Math.floor(this.audioPlayer.nativeElement.currentTime);\r\n      //check if audio is ended for next song and pass data to component\r\n      if (this.audioPlayer.nativeElement.ended) {\r\n        this.isAudioEnded.next(true);\r\n      }\r\n    });\r\n\r\n    this.audioPlayer.nativeElement.addEventListener('volumechange', () => {\r\n      this.audioVolume = Math.floor(this.audioPlayer.nativeElement.volume * 100);\r\n      if (this.audioVolume == 0) {\r\n        this.isMute = true;\r\n      } else {\r\n        this.isMute = false;\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  play() {\r\n    //toggle play-pause button\r\n    this.isAudioPlaying = true;\r\n    //play when user click play button\r\n    setTimeout(() => {\r\n      this.audioPlayer.nativeElement.play();\r\n      this.playEvent.emit();\r\n     }, 0);\r\n  }\r\n\r\n  pause() {\r\n    //toggle play-pause button\r\n    this.isAudioPlaying = false;\r\n    //pause when user click pause button\r\n    setTimeout(() => {\r\n      this.audioPlayer.nativeElement.pause();\r\n      this.pauseEvent.emit();\r\n     }, 0);\r\n  }\r\n\r\n  getAudioLength() {\r\n    this.totalAudioLength = Math.floor(this.audioPlayer.nativeElement.duration);\r\n  }\r\n}\r\n","import { Component, OnInit, Output, Input, EventEmitter } from '@angular/core';\r\nimport { AudioPlyerOptions } from '../audioPlayer';\r\n\r\n@Component({\r\n  selector: 'ang-music-player',\r\n  templateUrl: './ang-music-player.component.html',\r\n  styleUrls: ['./ang-music-player.component.scss']\r\n})\r\nexport class AngMusicPlayerComponent extends AudioPlyerOptions implements OnInit {\r\n  @Input() width; \r\n  @Input() height; \r\n  @Input() backgroundColor; \r\n  @Input() audioTimeColor;\r\n  @Input() audioTitleColor; \r\n  @Input() volumeSliderColor; \r\n  @Input() timeSliderColor;\r\n  @Input() audioList = [];\r\n  @Input() next = true;\r\n  @Input() previous = true;\r\n  @Input() shuffle = true;\r\n  @Input() repeat = true;\r\n  @Input() scrollTitle = false;\r\n  @Input() playButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() pauseButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() nextButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() previousButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() repeatButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() activeRepeatButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() volumeButtonColor = \"rgb(76, 130, 175)\";\r\n  @Input() muteButtonColor = \"rgb(76, 130, 175)\";\r\n  @Output() nextEvent = new EventEmitter();\r\n  @Output() previousEvent = new EventEmitter();\r\n  @Output() repeatEvent = new EventEmitter();\r\n  @Output() shuffleEvent = new EventEmitter();\r\n  @Output() seekEvent = new EventEmitter();\r\n\r\n  selectedAudio;\r\n  currentAudioIndex = 0;\r\n  repeatActive = false;\r\n  isError = false;\r\n  isShuffle = false;\r\n  volumeBeforeMute;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.options();\r\n    this.initiateAudioPlayer();\r\n    //check audio is ended for next song\r\n    this.isAudioEnded.subscribe(data => {\r\n      if (!this.isRepeat && this.audioList.length > 0) {\r\n        this.nextAudio();\r\n      }\r\n    })\r\n  }\r\n\r\n  nextAudio() {\r\n    if (this.audioList.length - 1 != this.currentAudioIndex) {\r\n      this.currentAudioIndex += 1;\r\n      this.selectedAudio = this.audioList[this.currentAudioIndex];\r\n      this.getAudioLength();\r\n      if (this.isAudioPlaying) {\r\n        this.play();\r\n      }\r\n      this.nextEvent.emit();\r\n    }else{\r\n      this.pause();\r\n    }\r\n  }\r\n\r\n  previousAudio() {\r\n    if (this.currentAudioIndex != 0) {\r\n      this.currentAudioIndex -= 1;\r\n      this.selectedAudio = this.audioList[this.currentAudioIndex];\r\n      this.getAudioLength();\r\n      if (this.isAudioPlaying) {\r\n        this.play();\r\n      }\r\n      this.previousEvent.emit();\r\n    }\r\n  }\r\n\r\n  seekAudio(seekAudioValue) {\r\n    if (this.audioVolume != 0) {\r\n      this.isMute = false;\r\n    }\r\n    this.audioPlayer.nativeElement.currentTime = seekAudioValue.target.value;\r\n    this.seekEvent.emit();\r\n  }\r\n\r\n  repeatAudio() {\r\n    this.isRepeat = !this.isRepeat;\r\n    this.repeatActive = !this.repeatActive;\r\n    this.audioPlayer.nativeElement.loop = this.isRepeat;\r\n    this.repeatEvent.emit();\r\n  }\r\n\r\n/*   shuffleAudio() {\r\n    this.isShuffle = !this.isShuffle;\r\n    if (this.isShuffle) {\r\n    let randomItem = Math.floor(Math.random() * this.audioList.length);\r\n    console.log(randomItem);\r\n    \r\n    }\r\n    this.shuffleEvent.emit();\r\n  } */\r\n\r\n  volumeChange(volume) {\r\n    this.audioPlayer.nativeElement.volume = volume.target.value / 100;\r\n  }\r\n\r\n  muteAudio() {\r\n    if (this.isMute) {\r\n      this.audioPlayer.nativeElement.volume = 0.5;\r\n      this.isMute = false;\r\n    } else {\r\n      this.audioPlayer.nativeElement.volume = 0;\r\n      this.isMute = true;\r\n    }\r\n  }\r\n\r\n  initiateAudioPlayer() {\r\n    if (this.audioList.length <= 0) {\r\n      this.isError = true;\r\n    } else {\r\n      this.selectedAudio = this.audioList[this.currentAudioIndex];\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'timeConversion'\r\n})\r\nexport class TimeConversionPipe implements PipeTransform {\r\n\r\n  transform(audioTime: number): string {\r\n    let audioLengthMin = ( \"0\" + Math.floor( audioTime / 60)).slice(-2);\r\n    let audioLengthSec = ( \"0\" + audioTime % 60).slice(-2);\r\n    return `${audioLengthMin}:${audioLengthSec}`\r\n\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AngMusicPlayerComponent } from './component/ang-music-player.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimeConversionPipe } from './pipes/time-conversion.pipe';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [AngMusicPlayerComponent, TimeConversionPipe],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [AngMusicPlayerComponent]\r\n})\r\nexport class AngMusicPlayerModule { }\r\n","/*\r\n * Public API Surface of ang-music-player\r\n */\r\n\r\nexport * from './lib/serives/ang-music-player.service';\r\nexport * from './lib/component/ang-music-player.component';\r\nexport * from './lib/ang-music-player.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AudioPlyerOptions as ɵa} from './lib/audioPlayer';\nexport {TimeConversionPipe as ɵb} from './lib/pipes/time-conversion.pipe';"],"names":[],"mappings":"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"}