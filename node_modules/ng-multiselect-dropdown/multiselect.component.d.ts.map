{"version":3,"file":"multiselect.component.d.ts","sources":["multiselect.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ChangeDetectorRef } from \"@angular/core\";\r\nimport { ControlValueAccessor } from \"@angular/forms\";\r\nimport { ListItem, IDropdownSettings } from \"./multiselect.model\";\r\nexport declare const DROPDOWN_CONTROL_VALUE_ACCESSOR: any;\r\nexport declare class MultiSelectComponent implements ControlValueAccessor {\r\n    private cdr;\r\n    _settings: IDropdownSettings;\r\n    _data: Array<ListItem>;\r\n    selectedItems: Array<ListItem>;\r\n    isDropdownOpen: boolean;\r\n    _placeholder: string;\r\n    private _sourceDataType;\r\n    private _sourceDataFields;\r\n    filter: ListItem;\r\n    defaultSettings: IDropdownSettings;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n    settings: IDropdownSettings;\r\n    data: Array<any>;\r\n    onFilterChange: EventEmitter<ListItem>;\r\n    onDropDownClose: EventEmitter<ListItem>;\r\n    onSelect: EventEmitter<ListItem>;\r\n    onDeSelect: EventEmitter<ListItem>;\r\n    onSelectAll: EventEmitter<Array<ListItem>>;\r\n    onDeSelectAll: EventEmitter<Array<ListItem>>;\r\n    private onTouchedCallback;\r\n    private onChangeCallback;\r\n    onFilterTextChange($event: any): void;\r\n    constructor(cdr: ChangeDetectorRef);\r\n    onItemClick($event: any, item: ListItem): boolean;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    onTouched(): void;\r\n    trackByFn(index: any, item: any): any;\r\n    isSelected(clickedItem: ListItem): boolean;\r\n    isLimitSelectionReached(): boolean;\r\n    isAllItemsSelected(): boolean;\r\n    showButton(): boolean;\r\n    itemShowRemaining(): number;\r\n    addSelected(item: ListItem): void;\r\n    removeSelected(itemSel: ListItem): void;\r\n    emittedValue(val: any): any;\r\n    objectify(val: ListItem): {};\r\n    toggleDropdown(evt: any): void;\r\n    closeDropdown(): void;\r\n    toggleSelectAll(): boolean;\r\n    getFields(inputData: any): any[];\r\n}\r\n"]}