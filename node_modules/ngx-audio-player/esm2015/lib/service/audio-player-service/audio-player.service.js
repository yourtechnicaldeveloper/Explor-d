import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
let AudioPlayerService = class AudioPlayerService {
    constructor() {
        // Dynamic update of playlist
        this.tracks = [];
        this.playlistSubject$ = new BehaviorSubject(this.tracks);
        // Get the current track
        this.currentTrack = null;
        this.currentTrackSubject$ = new BehaviorSubject(this.currentTrack);
        // Get the current time
        this.currentTime = null;
        this.currentTimeSubject$ = new BehaviorSubject(this.currentTime);
    }
    setPlaylist(tracks) {
        this.tracks = tracks;
        this.playlistSubject$.next(this.tracks);
    }
    getPlaylist() {
        return this.playlistSubject$.asObservable();
    }
    setCurrentTrack(currentTrack) {
        this.currentTrack = currentTrack;
        this.currentTrackSubject$.next(this.currentTrack);
    }
    getCurrentTrack() {
        return this.currentTrackSubject$.asObservable();
    }
    setCurrentTime(currentTime) {
        this.currentTime = currentTime;
        this.currentTimeSubject$.next(this.currentTime);
    }
    getCurrentTime() {
        return this.currentTimeSubject$.asObservable();
    }
};
AudioPlayerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AudioPlayerService_Factory() { return new AudioPlayerService(); }, token: AudioPlayerService, providedIn: "root" });
AudioPlayerService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root',
    })
], AudioPlayerService);
export { AudioPlayerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaW8tcGxheWVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXVkaW8tcGxheWVyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvYXVkaW8tcGxheWVyLXNlcnZpY2UvYXVkaW8tcGxheWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7QUFNbkQsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7SUFIL0I7UUFLRSw2QkFBNkI7UUFDN0IsV0FBTSxHQUFZLEVBQUUsQ0FBQztRQUNyQixxQkFBZ0IsR0FDZCxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUMsd0JBQXdCO1FBQ3hCLGlCQUFZLEdBQVUsSUFBSSxDQUFDO1FBQzNCLHlCQUFvQixHQUNsQixJQUFJLGVBQWUsQ0FBUSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFaEQsdUJBQXVCO1FBQ3ZCLGdCQUFXLEdBQVEsSUFBSSxDQUFDO1FBQ3hCLHdCQUFtQixHQUNqQixJQUFJLGVBQWUsQ0FBTSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0E2QjlDO0lBM0JDLFdBQVcsQ0FBQyxNQUFlO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUVELGVBQWUsQ0FBQyxZQUFtQjtRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2xELENBQUM7SUFFRCxjQUFjLENBQUMsV0FBZ0I7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELGNBQWM7UUFDWixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0NBRUYsQ0FBQTs7QUE1Q1ksa0JBQWtCO0lBSDlCLFVBQVUsQ0FBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7R0FDVyxrQkFBa0IsQ0E0QzlCO1NBNUNZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVHJhY2sgfSBmcm9tICcuLi8uLi9tb2RlbC90cmFjay5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBdWRpb1BsYXllclNlcnZpY2Uge1xuXG4gIC8vIER5bmFtaWMgdXBkYXRlIG9mIHBsYXlsaXN0XG4gIHRyYWNrczogVHJhY2tbXSA9IFtdO1xuICBwbGF5bGlzdFN1YmplY3QkOiBCZWhhdmlvclN1YmplY3Q8VHJhY2tbXT4gPVxuICAgIG5ldyBCZWhhdmlvclN1YmplY3Q8VHJhY2tbXT4odGhpcy50cmFja3MpO1xuXG4gIC8vIEdldCB0aGUgY3VycmVudCB0cmFja1xuICBjdXJyZW50VHJhY2s6IFRyYWNrID0gbnVsbDtcbiAgY3VycmVudFRyYWNrU3ViamVjdCQ6IEJlaGF2aW9yU3ViamVjdDxUcmFjaz4gPVxuICAgIG5ldyBCZWhhdmlvclN1YmplY3Q8VHJhY2s+KHRoaXMuY3VycmVudFRyYWNrKTtcblxuICAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZVxuICBjdXJyZW50VGltZTogYW55ID0gbnVsbDtcbiAgY3VycmVudFRpbWVTdWJqZWN0JDogQmVoYXZpb3JTdWJqZWN0PGFueT4gPVxuICAgIG5ldyBCZWhhdmlvclN1YmplY3Q8YW55Pih0aGlzLmN1cnJlbnRUaW1lKTtcblxuICBzZXRQbGF5bGlzdCh0cmFja3M6IFRyYWNrW10pIHtcbiAgICB0aGlzLnRyYWNrcyA9IHRyYWNrcztcbiAgICB0aGlzLnBsYXlsaXN0U3ViamVjdCQubmV4dCh0aGlzLnRyYWNrcyk7XG4gIH1cblxuICBnZXRQbGF5bGlzdCgpOiBPYnNlcnZhYmxlPFRyYWNrW10+IHtcbiAgICByZXR1cm4gdGhpcy5wbGF5bGlzdFN1YmplY3QkLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgc2V0Q3VycmVudFRyYWNrKGN1cnJlbnRUcmFjazogVHJhY2spIHtcbiAgICB0aGlzLmN1cnJlbnRUcmFjayA9IGN1cnJlbnRUcmFjaztcbiAgICB0aGlzLmN1cnJlbnRUcmFja1N1YmplY3QkLm5leHQodGhpcy5jdXJyZW50VHJhY2spO1xuICB9XG5cbiAgZ2V0Q3VycmVudFRyYWNrKCk6IE9ic2VydmFibGU8VHJhY2s+IHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50VHJhY2tTdWJqZWN0JC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHNldEN1cnJlbnRUaW1lKGN1cnJlbnRUaW1lOiBhbnkpIHtcbiAgICB0aGlzLmN1cnJlbnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgdGhpcy5jdXJyZW50VGltZVN1YmplY3QkLm5leHQodGhpcy5jdXJyZW50VGltZSk7XG4gIH1cblxuICBnZXRDdXJyZW50VGltZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRUaW1lU3ViamVjdCQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxufVxuIl19